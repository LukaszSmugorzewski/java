// Programowanie obiektowe
// ----------------------------------------
// Operacje na tablicach.
// ----------------------------------------
// mgr inż. Adam Zalewski
// University of Warmia and Mazury in Olsztyn
// Faculty of Mathematics and Computer Science
// Institute of Computer Science
// Chair of Applied Computer Science and Mathematical Modeling

import java.util.Scanner;

public class Zestaw2 {

    // Zadanie 0.
    // Napisz funkcję główną (main).
    public static void main(String args[]){
        System.out.println(zadanie_1(5,2,10));
    }


    // Zadanie 1.
    // Napisz funkcję generujTablice(n, minWartosc, maxWartosc), która generuje tablicę liczb gdzie n oznacza ilość
    // elementów tablicy, minWartosc wartość minimalną w tablicy,
    // a maxWartosc wartość maksymalną.

    static int[] zadanie_1(int n, int minWartosc, int maxWartosc){
        int[] tab = new int[n];
        for(int i = 0; i < n; i++){
            tab[i] = (int)(Math.random() * (maxWartosc - minWartosc + 1)) + minWartosc;
        }
        return tab;
    }

    // Zadanie 2.
    // Napisz funkcję wypiszTablice(tab, n, m), która wypisuje na ekranie tablice
    // w formie macierzy o wymiarach n x m. W przypadku gdy n*m
    // jest większe od długości tablicy program wypisuje puste pola.
    // Zadbaj o to, aby liczby były ułożone równo.

    static void zadanie_2(){

    }

    // Zadanie 3.
    //  Wykorzystując funkcję z zadania 1. napisz funkcje ileNieparzystych(tab)
    //  zliczające ilość liczb nieparzystych w tablicy.

    static int zadanie_3(int[] tab){
    int ile = 0;
    for(int i = 0; i<tab.length; i++){
        if((tab[i] % 2 == 1)){
            ile++;
        }
    }
    return ile;
    }

    // Zadanie 4.
    //  Wykorzystując funkcję z zadania 1. napisz funkcje ileParzystych(tab)
    //  zliczające ilość liczb parzystych w tablicy.

    static void zadanie_4(){

    }

    // Zadanie 5.
    //  Wykorzystując funkcję z zadania 1. napisz funkcje ileDodatnich(tab)
    //  zliczające ilość liczb dodatnich w tablicy.

    static void zadanie_5(){
    
    }

    // Zadanie 6.
    //  Wykorzystując funkcję z zadania 1. napisz funkcje ileUjemnych(tab)
    //  zliczające ilość liczb ujemnych w tablicy.

    static void zadanie_6(){
    int ile = 0;
    for(int i = 0)
    }

    // Zadanie 7.
    //  Wykorzystując funkcję z zadania 1. napisz funkcje ileZerowych(tab)
    //  zliczające ilość liczb o wartości zero w tablicy.

    static void zadanie_7(){
    
    }

    // Zadanie 8.
    //  Wykorzystując funkcję z zadania 1. napisz funkcje ileMaxymalnych(tab)
    //  zliczające ilość liczb o wartości max w tablicy.

    static int zadanie_8(int[] tab){
        int max = tab[0];
        for(int i = 1; i<tab.length; i++){
            if(tab[i]>max){
                max = tab[i];
            }
        }
            
        int ile = 0;    
        for(int i = 0; i<tab.length; i++){
            if(tab[i] == max){
                ile++;
            }
        }
        return ile;
    }

    // Zadanie 9.
    //  Wykorzystując funkcję z zadania 1. napisz funkcje ileMinimalnych(tab)
    //  zliczające ilość liczb o wartości min w tablicy.

    static int zadanie_9(int tab[]){
        int min = tab[0];
        for(int i = 1; i<tab.length; i++){
            if(tab[i]<min){
                min = tab[i];
            }
        }

        int ile = 0;
        for(int i = 0; i<tab.length; i++){
            if(tab[i] == min){
                ile++;
            }
        }
        return ile;
    }

    // Zadanie 10.
    //  Wykorzystując funkcję z zadania 1. napisz funkcje ileUnikalnych(tab)
    //  zliczające ilość liczb, które się nie powtarzają w tablicy.

    static void zadanie_10(){

    }

    // Zadanie 11.
    // Wykorzystując funkcje z zadania 1. napisz funkcje sumaDodatnich(tab)
    // wykonującą odpowiednie operacje arytmetyczne na elemantach tablicy.

    static int zadanie_11(int[] tab){
        int wynik = 0;
        for(int i = 0; i < tab.length; i++){
            if(tab[i] > 0){
                wynik += tab[i];
            }
        }
        return wynik;
    }

    // Zadanie 12.
    // Wykorzystując funkcje z zadania 1. napisz funkcje sumaUjemnych(tab)
    // wykonującą odpowiednie operacje arytmetyczne na elemantach tablicy.

    static int zadanie_12(int[] tab){
        int wynik = 0;
        for(int i = 0; i < tab.length; i++){
            if(tab[i] < 0){
                wynik += tab[i];
            }
        }
        return wynik;
    }

    // Zadanie 13.
    // Wykorzystując funkcje z zadania 1. napisz funkcje sumaOdwrotnosci(tab)
    // wykonującą odpowiednie operacje arytmetyczne na elemantach tablicy.

    static int zadanie_13(int[] tab){
        float wynik = 0;
        for(int i = 0; i < tab.length)

    }

    // Zadanie 14.
    // Wykorzystując funkcje z zadania 1. napisz funkcje sredniaArytmetyczna(tab)
    // wykonującą odpowiednie operacje arytmetyczne na elemantach tablicy.

    static int zadanie_14(int[] tab){
        float wynik = 0;
        for(int i = 0; i < tab.length; i++){
            wynik += tab[i];
        }
        return wynik/tab.length;
    }

    // Zadanie 15.
    // Wykorzystując funkcje z zadania 1. napisz funkcje sredniaGeometryczna(tab)
    // wykonującą odpowiednie operacje arytmetyczne na elemantach tablicy.

    static double zadanie_15(int[] tab){
        double wynik = 1;
        for(int i = 0; i < tab.length; i++){
            wynik += tab[i];
        }
        
        return Math.pow(wynik, 1/tab.length);
    }

    // Zadanie 16.
    // Wykorzystując funkcje z zadania 1. napisz funkcje sredniaHarmoniczna(tab)
    // wykonującą odpowiednie operacje arytmetyczne na elemantach tablicy.

    static int zadanie_16(int[] tab){
        return tab.length/zadanie_13(tab);

    }

    // Zadanie 17.
    // Napisz funkcje funkcjaLiniowa(tab, a, b) zwracające tablice wartości funkcji.

    static void zadanie_17(){

    }

    // Zadanie 18.
    // Napisz funkcje funkcjaKwadratowa(tab, a, b, c) zwracające tablice wartości funkcji.

    static void zadanie_18(){

    }

    // Zadanie 19.
    // Napisz funkcje funkcjaWykladnicza(tab, a, b) zwracające tablice wartości funkcji.

    static void zadanie_19(){

    }

    // Zadanie 20.
    // Napisz funkcje funkcjaSignum(tab) zwracające tablice wartości funkcji.

    static void zadanie_20(){

    }

    // Zadanie 21.
    // Wykorzystując funkcję z zadania 1. napisz funkcje najdluzszyCiagDodatnich(tab),
    // która wykonuje odpowiednie operacje na tablicy.

    static void zadanie_21(){

    }

    // Zadanie 22.
    // Wykorzystując funkcję z zadania 1. napisz funkcje najdluzszyCiagUjemnych(tab),
    // która wykonuje odpowiednie operacje na tablicy.

    static void zadanie_22(){

    }

    // Zadanie 23.
    // Wykorzystując funkcję z zadania 1. napisz funkcje odwrocTablice(tab),
    // która wykonuje odpowiednie operacje na tablicy.

    static void zadanie_23(){

    }

    // Zadanie 24.
    // Wykorzystując funkcję z zadania 1. napisz funkcje odwrocTablice(tab, indeksStart, indeksStop),
    // która wykonuje odpowiednie operacje na tablicy.

    static void zadanie_24(){

    }

    // Zadanie 25.
    //  Napisz funkcję generujZakres(n, minWartosc, maxWartosc),
    //  która generuje tablicę liczb o równych odstępach od siebie.

    static void zadanie_25(){

    }
}

