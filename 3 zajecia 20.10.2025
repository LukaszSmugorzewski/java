package Zestaw3;

import java.util.ArrayList;
import java.util.Collections;

public class Zestaw3 {
    // Zadanie 0.
    // Napisz funkcję główną (main).
    public static void main(String[] args){
        ArrayList<Integer> tab1 = new ArrayList<Integer>();
        ArrayList<Integer> tab2 = new ArrayList<Integer>();

        tab1.add(10);
        tab1.add(5);
        tab1.add(12);
        tab1.add(65);
        tab1.add(2);

        tab2.add(33);
        tab2.add(1);
        tab2.add(3);

        System.out.println(append(tab1, tab2));
        System.out.println(merge(tab1, tab2));
        System.out.println(mergeSorted(tab1, tab2));
        System.out.println(toArrayList("ocotuchodzi123123"));
        System.out.println();
    }

    // Zadanie 1.
    // Napisz funkcję
    //		append(ArrayList<Integer> tab1, ArrayList<Integer> tab2),
    // która tworzy nową listę tablicową poprzez
    // dołączenie drugiej listy tablicowej do pierwszej.

    static ArrayList<Integer> append(ArrayList<Integer> tab1, ArrayList<Integer> tab2){
        ArrayList<Integer> res = new ArrayList<Integer>();

        for(int i = 0; i < tab1.size(); i++){
            res.add(tab1.get(i));
        }

        for(int i = 0; i < tab2.size(); i++){
            res.add(tab2.get(i));
        }

        return res;
    }

    // Zadanie 2.
    // Napisz funkcję
    //		merge(ArrayList<Integer> tab1, ArrayList<Integer> tab2),
    // która tworzy nową listę tablicową poprzez
    // dołączenie drugiej listy tablicowej do pierwszej w taki sposób,
    // że elementy wstawiane są na przemian. W przypadku, gdy skończą się
    // elementy jednej listy to do wyniku należy dołączyć pozostałe elementy.

    static ArrayList<Integer> merge(ArrayList<Integer> tab1, ArrayList<Integer> tab2){
        ArrayList<Integer> res = new ArrayList<Integer>();
        int i = 0;
        int j = 0;
        while(i < tab1.size() && j < tab2.size()){
            res.add(tab1.get(i));
            res.add(tab2.get(j));
            i++;
            j++;
        }

        while(i < tab1.size()){
            res.add(tab1.get(i));
            i++;
        }
        while(j < tab2.size()){
            res.add(tab2.get(j));
            j++;
        }

        return res;
    }

    // Zadanie 3.
    // Napisz funkcję
    //		mergeSorted(ArrayList<Integer> tab1, ArrayList<Integer> tab2),
    // która tworzy nową listę tablicową poprzez
    // dołączenie drugiej listy tablicowej do pierwszej w taki sposób,
    // że elementy wstawiane są w porządku rosnącym.

    static ArrayList<Integer> mergeSorted(ArrayList<Integer> tab1, ArrayList<Integer> tab2){
        ArrayList<Integer> res = new ArrayList<Integer>();

        Collections.sort(tab1);
        Collections.sort(tab2);

        int i = 0;
        int j = 0;

        while(i < tab1.size() && j < tab2.size()){
            if (tab1.get(i) < tab2.get(j)) {
                res.add(tab1.get(i));
                i++;
            } else{
                res.add(tab2.get(j));
                j++;
            }
        }
        while (i < tab1.size()) {
            res.add(tab1.get(i));
            i++;
        }
        while (j < tab2.size()) {
            res.add(tab2.get(j));
            j++;
        }
        return res;
    }

    // Zadanie 4.
    // Napisz funkcje
    //		toArrayList(String napis)
    //		toArrayList(int liczba),
    // które z napisu/liczby tworzą listę tablicową posortowanych rosnąco znaków/cyfr.

    static ArrayList<String> toArrayList(String napis) {
        ArrayList<String> lista = new ArrayList<String>();
        for (int i = 0; i < napis.length(); i++){

            lista.add(String.valueOf(napis.charAt(i)));
        }
        Collections.sort(lista);
        return lista;

    }

    static ArrayList<Integer> toArrayList(int liczba) {
        ArrayList<Integer> lista = new ArrayList<Integer>();
        String s = String.valueOf(liczba);
        for (int i = 0; i < s.length(); i++) {
            int cyfra = Character.getNumericValue(s.charAt(i));
            lista.add(cyfra);
        }
        Collections.sort(lista);
        return lista;
    }
    // Zadanie 5.
    // Napisz funkcje
    //		checkChar(ArrayList<String> tab, char znak)
    // 		checkDigit(ArrayList<Integer> tab, int cyfra),
    // które sprawdzają czy podany znak/cyfra jest w liście
    // tablicowej z zadania 4 i zwracają true lub false.

    static boolean checkChar(ArrayList<String> tab, char znak){
        for (int i = 0; i < tab.size(); i++){
            if (tab.get(i).charAt(0) == znak) return true;
        }
        return false;
    }

    static boolean checkDigit(ArrayList<Integer> tab, int cyfra){
        for (int i = 0; i < tab.size(); i++){
            if (tab.get(i) == cyfra) return true;
        } return false;
    }

    // Zadanie 6.
    // Napisz funkcje
    //		countChar(ArrayList<String> tab, char znak)
    // 		countDigit(ArrayList<Integer> tab, int cyfra),
    // które zliczają występowanie podanego znaku/cyfry
    // w liście tablicowej z zadania 4 i zwracają ilość zliczonych elementów.

    static int countChar(ArrayList<String> tab, char znak){
        int licznik = 0;
        for (int i = 0; i < tab.size(); i++){
            if (tab.get(i).charAt(0) == znak) licznik++;
        }
        return licznik;
    }

    static int countDigit(ArrayList<Integer> tab, int cyfra){
        int licznik = 0;
        for (int i = 0; i < tab.size(); i++){
            if (tab.get(i) == cyfra) licznik++;
        }
        return licznik;
    }

    // Zadanie 7.
    // Napisz funkcje
    //		uniqueArrayList(ArrayList<String> tab)
    // 		uniqueArrayList(ArrayList<Integer> tab),
    // które tworzą dwuwymiarową listę tablicową unikalnych wartości,
    // a każda z wartości ma przyporządkowane 0.
    // Przykład: tab=[1,4,5,5,7,7] wynik -> [[1,0], [4,0], [5,0], [7,0]]

    static ArrayList<ArrayList<Integer>> uniqueArrayList(ArrayList<Integer> tab){
        ArrayList<ArrayList<Integer>> wynik = new ArrayList<>();
        ArrayList<Integer> unikalne = new ArrayList<>();

        for(int i = 0; i < tab.size(); i++){
            int liczba = tab.get(i);
            if (!unikalne.contains(liczba)) {
                unikalne.add(liczba);
            }

// Zadanie 8.
// Napisz funkcje
//      countArrayList(ArrayList<String> tab)
//      countArrayList(ArrayList<Integer> tab),
// które tworzą dwuwymiarową listę tablicową, w której
// zliczana jest ilość występujących cyfr/znaków z tablic z zadania 4.
// Przykład: tab=[1,4,5,5,7,7] wynik -> [[1,1], [4,1], [5,2], [7,2]]

static ArrayList<ArrayList<Integer>> countArrayList(ArrayList<Integer> tab) {
    ArrayList<ArrayList<Integer>> wynik = new ArrayList<>();

    for (int i = 0; i < tab.size(); i++) {
        int liczba = tab.get(i);
        int znaleziony = -1;

        for (int j = 0; j < wynik.size(); j++) {
            if (wynik.get(j).get(0) == liczba) {
                znaleziony = j;
                break;
            }
        }

        if (znaleziony == -1) {
            ArrayList<Integer> para = new ArrayList<>();
            para.add(liczba);
            para.add(1);
            wynik.add(para);
        } else {
            int ile = wynik.get(znaleziony).get(1);
            wynik.get(znaleziony).set(1, ile + 1);
        }
    }
    return wynik;
}

static ArrayList<ArrayList<String>> countArrayList(ArrayList<String> tab) {
    ArrayList<ArrayList<String>> wynik = new ArrayList<>();

    for (int i = 0; i < tab.size(); i++) {
        String znak = tab.get(i);
        int znaleziony = -1;

        for (int j = 0; j < wynik.size(); j++) {
            if (wynik.get(j).get(0).equals(znak)) {
                znaleziony = j;
                break;
            }
        }

        if (znaleziony == -1) {
            ArrayList<String> para = new ArrayList<>();
            para.add(znak);
            para.add("1");
            wynik.add(para);
        } else {
            int ile = Integer.parseInt(wynik.get(znaleziony).get(1)) + 1;
            wynik.get(znaleziony).set(1, String.valueOf(ile));
        }
    }
    return wynik;
}

        for (int i = 0; i < unikalne.size(); i++){
            ArrayList<Integer> para = new ArrayList<>();
            para.add(unikalne.get(i));
            para.add(0);
            wynik.add(para);
        }
        return wynik;
    }

    // Zadanie 8.
    // Napisz funkcje
    // 		countArrayList(ArrayList<String> tab)
    // 		countArrayList(ArrayList<Integer> tab),
    // które tworzą dwuwymiarową listę tablicową, w której
    // zliczana jest ilość występujących cyfry/znaków z tablic z zadania 4
    // Przykład: tab=[1,4,5,5,7,7] wynik -> [[1,1], [4,1], [5,2], [7,2]]


    static ArrayList<ArrayList<Integer>> countArrayList(ArrayList<Integer> tab) {
        ArrayList<ArrayList<Integer>> wynik = new ArrayList<>();

        for (int i = 0; i < tab.size(); i++) {
            int liczba = tab.get(i);
            int znaleziony = 
